#!/usr/bin/env ruby
require 'json'
require 'watir-webdriver'
require 'watir-scroll'

class BingRewards
  attr_reader :user, :pass, :b

  def initialize(options)
    @user = options["user"]
    @pass = options["pass"]
    @reward_points = []
    @b    = Watir::Browser.new :firefox
  end

  def retrieve_search_terms(queries)
    # get top trends from google
    b.goto "http://www.google.com/trends/hottrends"

    # Load more results on the page
    # approx 25 results per page
    n = (queries / 25.0).ceil

    n.times do
      bb = b.div id: "more-link"
      until bb.exists?
        sleep(1)
        bb = b.div id: "more-link"
      end
      bb.click
    end

    # get keywords
    # DOM element: span 'hottrends-single-trend-title'
    s = b.spans class: "hottrends-single-trend-title"
    s.map { |span| span.text.gsub(/\s/,'+') }
  end

  def go
    login
    visit_reward_links
    count = get_query_count

    if count.zero?
      return
    else
      terms = retrieve_search_terms(count)
      run_search_queries(terms, count)
    end
  end

  def login
    # login
    b.goto "https://login.live.com/login.srf?wa=wsignin1.0&rpsnv=12&ct=1393221381&rver=6.0.5286.0&wp=MBI&wreply=http:%2F%2Fwww.bing.com%2FPassport.aspx%3Frequrl%3Dhttp%253a%252f%252fwww.bing.com%252f&lc=1033&id=264960"

    b.text_field(id: "i0116").set(user)
    b.text_field(id: "i0118").set(pass)
    b.input(type: "submit").click

    # break on bad login/pass
    if b.alert.exists?
      # get through dialog
      b.alert.ok

      # update cookie
      b.goto "bing.com"
    else
      user_error = b.div id: "idTd_PWD_ErrorMsg_Username"
      pass_error = b.div id: "idTd_PWD_Error_Password"

      if user_error.present? || pass_error.present?
        b.close
        puts "Bad login/pass! Aborting"
        abort
      end
    end

    # check if logged in
    retries = 0
    user = b.span(id: "id_s").text
    @points_start = "0 of 5"

    until (user != "Sign in" && @points_start != "0 of 5") || retries >= 5
      retries += 1
      sleep((0.5+1)**retries)
      b.goto "bing.com"
      user = b.span(id: "id_s").text
      @points_start = b.span(id: "id_rc").text
    end

    if retries == 5
      b.close
      puts "Unable to receive login from Bing after #{retries} attempts"
      abort
    end
  end

  def get_reward_links
    b.goto "bing.com" unless b.url.match(/bing.com/)
    # visit reward links for points
    #
    # source and click notification dropdown
    b.span(id: "bep_gleam").click

    # grab notification title, ignore description
    offers = b.iframe(id: "bepfm").divs class: "offertitle"
    links = offers.select { |x| x.text[/Earn.*credit.?$/] }
  end

  def visit_reward_links
    links = get_reward_links

    #select clickable reward links
    i = 0

    until links.empty? || i >= 5
      i += 1
      active_link = links.pop

      # save points earned through click from title
      @reward_points << active_link.text[/\d/]

      # click link
      active_link.click
      b.goto "bing.com"
      links = get_reward_links
    end
  end

  def get_query_stats
    b.goto "bing.com" unless b.url.match(/bing.com$/)
    b.span(id: "bep_gleam").click

    offers_el = b.iframe(id: "bepfm").divs(class: "text")

    # bring all elements into scope and re-set offers_el
    b.scroll.to offers_el.last
    offers_el = b.iframe(id: "bepfm").divs(class: "text")

    body = offers_el.select { |x| x.text[/Search and Earn/i] }.first

    if body
      stats = body.text.split("\n")

      # "Search and Earn-30 of 30"
      match = stats.first.match(/-(?<current>\d+).*of\s(?<max>\d+)/)

      # "Earn 1 credit per 3 Bing searches up to 30 credits a day."
      match2 = stats.last.match(/per\s(?<multiplier>\d)/)

      # Hashit
      hash = Hash[match.names.zip(match.captures)].merge(Hash[match2.names.zip(match2.captures)])
      hash.inject({}) {|memo, (k, v)| memo[k.to_sym] = v.to_i; memo}
    else
      get_alt_query_stats
    end
  end

  def get_alt_query_stats
    b.goto "http://www.bing.com/rewards/dashboard"

    # "15 credits" (reached max) || "1 of 15 credits"
    progress = b.divs(class: 'progress').last.text
    match = progress.match(/^(?<current>\d+)/)

    # "Earn 1 credit per 3 Bing searches up to 30 credits a day."
    description = b.spans(class: 'desc').last.text
    match2 = description.match(/per\s(?<multiplier>\d).*to\s(?<max>\d+)/)

    # match2_hash = match2 ? Hash[match2.names.zip(match2.captures)] : Hash["multiplier", 3, "max", 60]

    # Hashit
    hash = Hash[match.names.zip(match.captures)].merge(Hash[match2.names.zip(match2.captures)])
    hash.inject({}) {|memo, (k, v)| memo[k.to_sym] = v.to_i; memo}
  end


  def get_query_count
    stats = get_alt_query_stats
    (stats[:max] - stats[:current]) * stats[:multiplier]
  end

  def run_search_queries(terms, earnable_queries_count)
    # search 30x for points
    count = 0
    terms.first(earnable_queries_count).each do |key|
      b.goto "bing.com/search?q=#{key}"
      count +=1
      sleep(0.2)
    end
  end

  def report
    points_end = b.span(id: "id_rc").text
    b.close

    puts <<-PARAGRAPH

Results - #{user}
=======================
Points at start: #{@points_start}
Points now: #{points_end} (+#{points_end.to_i - @points_start.to_i})

PARAGRAPH
    if @reward_points.any?
      puts "Reward values earned: #{@reward_points}"
    else
      puts "No reward links found"
    end
  end
end

logins = JSON.parse(File.read("accts.json"))
logins.each do |cred|
  bot = BingRewards.new(cred)
  bot.go
  bot.report
end
